package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fio_finder/internal/delivery/graphql/graph/model"
	"fio_finder/internal/models"
	"strconv"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, input model.NewPerson) (*bool, error) {
	err := r.Services.Person.Create(ctx, &models.Person{
		Name:        *input.Name,
		Surname:     *input.Surname,
		Patronymic:  *input.Patronymic,
		Age:         uint64(*input.Age),
		Gender:      models.PersonGender(*input.Gender),
		Nationality: *input.Nationality,
	})
	return nil, err
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (*bool, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	err = r.Services.Person.Delete(ctx, uint64(intId))
	return nil, err
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, id string, input model.NewPerson) (*bool, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	fields := make(models.PersonFieldsToUpdate)

	if *input.Name != "" {
		fields[models.PersonFieldName] = *input.Name
	}
	if *input.Surname != "" {
		fields[models.PersonFieldSurname] = *input.Surname
	}
	if *input.Patronymic != "" {
		fields[models.PersonFieldPatronymic] = *input.Patronymic
	}
	if *input.Age != 0 {
		fields[models.PersonFieldAge] = *input.Age
	}
	if *input.Gender != "" {
		fields[models.PersonFieldGender] = *input.Gender
	}
	if *input.Nationality != "" {
		fields[models.PersonFieldNationality] = *input.Nationality
	}

	err = r.Services.Person.Update(ctx, uint64(intId), fields)
	return nil, err
}

// GetPersonList is the resolver for the getPersonList field.
func (r *queryResolver) GetPersonList(ctx context.Context) ([]*model.Person, error) {
	p, err := r.Services.Person.GetList(ctx)
	if err != nil {
		return nil, err
	}
	res := make([]*model.Person, 0)
	for i := range p {
		resI := &model.Person{
			Name:        p[i].Name,
			Surname:     p[i].Surname,
			Patronymic:  p[i].Patronymic,
			Age:         int(p[i].Age),
			Gender:      string(p[i].Gender),
			Nationality: p[i].Nationality,
		}
		res = append(res, resI)
	}
	return res, nil
}

// GetPerson is the resolver for the getPerson field.
func (r *queryResolver) GetPerson(ctx context.Context, id string) (*model.Person, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	p, err := r.Services.Person.Get(ctx, uint64(intId))
	if err != nil {
		return nil, err
	}
	res := model.Person{
		Name:        p.Name,
		Surname:     p.Surname,
		Patronymic:  p.Patronymic,
		Age:         int(p.Age),
		Gender:      string(p.Gender),
		Nationality: p.Nationality,
	}
	return &res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
